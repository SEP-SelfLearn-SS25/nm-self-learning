// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    student       Student?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Student {
    userId           String               @unique
    user             User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
    username         String               @id
    displayName      String
    enrollments      Enrollment[]
    competences      AchievedCompetence[]
    completedLessons CompletedLesson[]
    quizAttempts     QuizAttempt[]
}

model Course {
    courseId    String       @id
    slug        String       @unique
    title       String
    subtitle    String
    imgUrl      String?
    content     Json?
    enrollments Enrollment[]
}

model Enrollment {
    status      String
    createdAt   DateTime  @default(now())
    completedAt DateTime?

    courseId String
    course   Course @relation(fields: [courseId], references: [courseId], onDelete: Cascade)

    username String
    student  Student @relation(fields: [username], references: [username], onDelete: Cascade)

    @@id([courseId, username])
}

model Lesson {
    lessonId     String            @id
    slug         String            @unique
    title        String
    subtitle     String?
    imgUrl       String?
    quiz         String?
    competences  Competence[]
    completions  CompletedLesson[]
    quizAttempts QuizAttempt[]
}

model CompletedLesson {
    completedLessonId Int @id @default(autoincrement())

    lessonId  String
    lesson    Lesson   @relation(fields: [lessonId], references: [lessonId], onDelete: Cascade)
    username  String
    user      Student  @relation(fields: [username], references: [username], onDelete: Cascade)
    createdAt DateTime @default(now())

    @@index([username, lessonId])
}

model Competence {
    competenceId        String               @id
    title               String
    description         String?
    achievedCompetences AchievedCompetence[]
    lessons             Lesson[]
}

model AchievedCompetence {
    achievedCompetenceId Int @id @default(autoincrement())

    lessonSlug String
    achievedAt DateTime @default(now())

    competenceId String
    competence   Competence @relation(fields: [competenceId], references: [competenceId], onDelete: Cascade)

    username String
    student  Student @relation(fields: [username], references: [username], onDelete: Cascade)

    @@unique([lessonSlug, competenceId, username])
    @@index([competenceId, username])
}

model QuizAttempt {
    attemptId String   @id @default(uuid())
    createdAt DateTime @default(now())
    state     String

    student  Student @relation(fields: [username], references: [username])
    username String

    lesson   Lesson @relation(fields: [lessonId], references: [lessonId])
    lessonId String

    answers Json

    @@index([username, lessonId])
}
